generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model League {
  id                String   @id @default(cuid())
  sleeperLeagueId   String   @unique
  name              String
  year              Int
  totalRosters      Int
  rosterPositions   String
  scoringSettings   String
  previousLeagueId  String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  transactions      Transaction[]
  rosters          Roster[]
  draftPicks       DraftPick[]

  @@map("leagues")
}

model Player {
  id                String   @id @default(cuid())
  sleeperId         String   @unique
  firstName         String?
  lastName          String?
  fullName          String?
  position          String?
  team              String?
  age               Int?
  yearsExp          Int?
  status            String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  transactionItems  TransactionItem[]
  rosterSlots      RosterSlot[]
  draftPicks       DraftPick[]

  @@map("players")
}

model Manager {
  id            String   @id @default(cuid())
  sleeperUserId String   @unique
  username      String
  displayName   String?
  avatar        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  rosters           Roster[]
  transactionItems  TransactionItem[]
  originalDraftPicks DraftPick[] @relation("OriginalOwner")
  currentDraftPicks  DraftPick[] @relation("CurrentOwner")

  @@map("managers")
}

model Transaction {
  id          String   @id @default(cuid())
  leagueId    String
  type        String   // "trade", "waiver", "free_agent", "commissioner"
  status      String   // "complete", "failed"
  week        Int?
  timestamp   DateTime
  metadata    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  league      League @relation(fields: [leagueId], references: [id])
  items       TransactionItem[]

  @@map("transactions")
}

model TransactionItem {
  id            String  @id @default(cuid())
  transactionId String
  managerId     String?
  playerId      String?
  draftPickId   String?
  faabAmount    Int?
  type          String  // "add", "drop"
  createdAt     DateTime @default(now())

  transaction   Transaction @relation(fields: [transactionId], references: [id])
  manager       Manager?    @relation(fields: [managerId], references: [id])
  player        Player?     @relation(fields: [playerId], references: [id])
  draftPick     DraftPick?  @relation(fields: [draftPickId], references: [id])

  @@map("transaction_items")
}

model Roster {
  id          String   @id @default(cuid())
  leagueId    String
  managerId   String
  week        Int?
  wins        Int      @default(0)
  losses      Int      @default(0)
  ties        Int      @default(0)
  fpts        Float    @default(0)
  fptsAgainst Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  league      League       @relation(fields: [leagueId], references: [id])
  manager     Manager      @relation(fields: [managerId], references: [id])
  slots       RosterSlot[]

  @@unique([leagueId, managerId, week])
  @@map("rosters")
}

model RosterSlot {
  id        String   @id @default(cuid())
  rosterId  String
  playerId  String
  position  String   // "QB", "RB", "WR", "TE", "K", "DEF", "BN", "IR"
  createdAt DateTime @default(now())

  roster    Roster @relation(fields: [rosterId], references: [id])
  player    Player @relation(fields: [playerId], references: [id])

  @@map("roster_slots")
}

model DraftPick {
  id              String   @id @default(cuid())
  leagueId        String
  originalOwnerId String
  currentOwnerId  String
  year            Int
  round           Int
  pickNumber      Int?
  playerSelectedId String?
  traded          Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  league          League             @relation(fields: [leagueId], references: [id])
  originalOwner   Manager            @relation("OriginalOwner", fields: [originalOwnerId], references: [id])
  currentOwner    Manager            @relation("CurrentOwner", fields: [currentOwnerId], references: [id])
  playerSelected  Player?            @relation(fields: [playerSelectedId], references: [id])
  transactionItems TransactionItem[]

  @@unique([leagueId, year, round, originalOwnerId])
  @@map("draft_picks")
}